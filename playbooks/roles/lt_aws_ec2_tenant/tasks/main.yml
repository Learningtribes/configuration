---
- name: check AWS EC2 instance
  ec2_instance_facts:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    filters:
      "tag:Name": "{{ec2_instance_tenant_name}}"
  register: check_ec2_result
# - debug:
#     msg: "{{check_ec2_result}}"
- set_fact:
    ec2_id_fact: "{{check_ec2_result['instances'][0]['instance_id']}}"
  when: check_ec2_result['instances'][0] is defined
- fail:
    msg: instance had exist
  when: check_ec2_result['instances'][0] is defined
- name: create AWS EC2 instance
  ec2_instance:
    state: present
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    image_id: "{{check_image_result['images'][0]['image_id']}}"
    instance_initiated_shutdown_behavior: stop
    instance_type: "{{tenant_instance_type}}"
    key_name: "{{default_instance_key_name}}"
    security_group: Platform APP Security Group
    filters:
      'tag:Name': "{{ec2_instance_tenant_name}}"
    tags:
      Name: "{{ec2_instance_tenant_name}}"
      COST: "{{client_name}}"
      BACKUP: support
    termination_protection: yes
    ebs_optimized: yes
    vpc_subnet_id: "{{check_subnet_result['results'][0]['subnets'][0]['subnet_id']}}"
  register: create_ec2_result
  when: check_ec2_result['instances'][0] is not defined
# - debug:
#     msg: "{{create_ec2_result}}"
- set_fact:
    ec2_id_fact: "{{create_ec2_result['instances'][0]['instance_id']}}"
  when: check_ec2_result['instances'][0] is not defined
- name: check AWS ELB
  ec2_elb_facts:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    names: "{{elb_instance_tenant_name}}"
  register: check_elb_result
# - debug:
#     msg: "{{check_elb_result}}"
- name: check AWS ACM
  aws_acm_facts:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    domain_name: "*.learning-tribes.com"
  register: check_acm_result
  when: check_elb_result['elbs'][0] is not defined
# - debug:
#     msg: "{{check_acm_result}}"
- name: create AWS ELB target group
  elb_target_group:
    state: present
    region: "{{region}}"
    name: "{{elb_target_group_tenant_name}}"
    target_type: instance
    vpc_id: "{{vpc_id_fact}}"
    protocol: http
    port: 80
    health_check_protocol: http
    health_check_port: traffic-port
    health_check_timeout: 5
    healthy_threshold_count: 5
    unhealthy_threshold_count: 2
    health_check_interval: 30
    successful_response_codes: "200"
    targets:
      - Id: "{{ec2_id_fact}}"
        Port: 80
  register: create_elb_target_group_result
  when: check_elb_result['elbs'][0] is not defined
- name: create AWS ELB instance
  elb_application_lb:
    state: present
    region: "{{region}}"
    name: "{{elb_instance_tenant_name}}"
    scheme: internet-facing
    security_groups: Platform APP Security Group
    subnets:
      - "{{check_subnet_result['results'][0]['subnets'][0]['subnet_id']}}"
      - "{{check_subnet_result['results'][1]['subnets'][0]['subnet_id']}}"
    deletion_protection: yes
    http2: yes
    listeners:
      - Protocol: HTTPS
        Port: 443
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{elb_target_group_tenant_name}}"
        Certificates:
          - CertificateArn: "{{check_acm_result['certificates'][0]['certificate_arn']}}"
        SslPolicy: ELBSecurityPolicy-2016-08
    tags:
      Name: Platform ELB {{client_name}} 
      COST: "{{client_name}}" 
  register: create_elb_result
  when: check_elb_result['elbs'][0] is not defined
# - debug:
#     msg: "{{create_elb_result}}"
- name: "Add http to https redirect listener to ELB"
  command: > 
    aws elbv2 --region {{region}} create-listener 
    --load-balancer-arn {{create_elb_result['load_balancer_arn']}} --protocol HTTP --port 80 
    --default-actions 'Type=redirect,RedirectConfig={Protocol=HTTPS,Port=443,Host="#{host}",Path="/#{path}",Query="#{query}",StatusCode=HTTP_301}'
- name: check AWS S3
  aws_s3_bucket_facts:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
  register: check_s3_result
- set_fact:
    s3_id_fact: "{{s3_tenant_name}}"
- set_fact:
    s3_get_id_fact: false
- set_fact:
    s3_get_id_fact: true
  when: s3_id_fact == item.name
  with_items: "{{check_s3_result['ansible_facts']['buckets']}}"
# - debug:
#     msg: "{{s3_get_id_fact}}"
- name: create AWS S3 default bucket
  aws_s3:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    bucket: "{{s3_tenant_name}}"
    mode: create
    permission: private
  register: create_s3_result
  when: s3_get_id_fact == false
- name: add default bucket Tag
  s3_bucket:
    region: "{{region}}"
    bucket: "{{s3_tenant_name}}"
    tags:
      COST: "{{client_name}}"
  when: s3_get_id_fact == false
# - debug:
#     msg: "{{create_s3_result}}"
#   when: s3_get_id_fact == false
- set_fact:
    s3_public_id_fact: "{{s3_public_tenant_name}}"
- set_fact:
    s3_get_public_id_fact: false
- set_fact:
    s3_get_public_id_fact: true
  when: s3_public_id_fact == item.name
  with_items: "{{check_s3_result['ansible_facts']['buckets']}}"
- name: create AWS S3 public bucket
  aws_s3:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    bucket: "{{s3_public_tenant_name}}"
    mode: create
    permission: public-read
  when: s3_get_public_id_fact == false
- name: add public bucket Tag
  s3_bucket:
    region: "{{region}}"
    bucket: "{{s3_public_tenant_name}}"
    tags:
      COST: "{{client_name}}"
  when: s3_get_public_id_fact == false
- set_fact:
    s3_video_id_fact: "{{s3_video_tenant_name}}"
- set_fact:
    s3_get_video_id_fact: false
- set_fact:
    s3_get_video_id_fact: true
  when: s3_video_id_fact == item.name
  with_items: "{{check_s3_result['ansible_facts']['buckets']}}"
- name: create AWS S3 video bucket
  aws_s3:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    bucket: "{{s3_video_tenant_name}}"
    mode: create
    permission: private
  when: s3_get_video_id_fact == false
- name: add video bucket Tag
  s3_bucket:
    region: "{{region}}"
    bucket: "{{s3_video_tenant_name}}"
    tags:
      COST: "{{client_name}}"
  when: s3_get_video_id_fact == false
- name: add video bucket CORS
  aws_s3_cors:
    region: "{{region}}"
    bucket: "{{s3_video_tenant_name}}"
    state: present
    rules:
      - allowed_origins:
          - '*'
        allowed_methods:
          - GET
          - HEAD
          - POST
          - PUT
        allowed_headers:
          - '*'
        max_age_seconds: 3600
  when: s3_get_video_id_fact == false
- set_fact:
    s3_veda_id_fact: "{{s3_veda_tenant_name}}"
- set_fact:
    s3_get_veda_id_fact: false
- set_fact:
    s3_get_veda_id_fact: true
  when: s3_veda_id_fact == item.name
  with_items: "{{check_s3_result['ansible_facts']['buckets']}}"
- name: create AWS S3 veda bucket
  aws_s3:
    #aws_access_key: "{{aws_access_key}}"
    #aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    bucket: "{{s3_veda_tenant_name}}"
    mode: create
    permission: private
  when: s3_get_veda_id_fact == false
- name: add veda bucket Tag
  s3_bucket:
    region: "{{region}}"
    bucket: "{{s3_veda_tenant_name}}"
    tags:
      COST: "{{client_name}}"
  when: s3_get_veda_id_fact == false
- name: download inventory repo
  git: 
    repo: "{{inventory_git_url}}"
    dest: "{{inventory_repo_folder}}"
    version: "{{inventory_repo_branch}}"
    #clone: no
- name: EC2 APP instance for hosts INI file
  ini_file:
    path: "{{hosts_ini_file}}"
    allow_no_value: yes
    section: "{{client_name}}_tenant"
    option: "{{create_ec2_result['instances'][0]['public_ip_address']}}"
  when: check_ec2_result['instances'][0] is not defined
- name: EC2 APP region for hosts INI file
  ini_file:
    path: "{{hosts_ini_file}}"
    allow_no_value: yes
    section: "{{region}}:children"
    option: "{{client_name}}_tenant"
  when: check_ec2_result['instances'][0] is not defined
- name: EC2 DB tenant for hosts INI file
  ini_file:
    path: "{{hosts_ini_file}}"
    allow_no_value: yes
    section: "tenants:children"
    option: "{{client_name}}_tenant"
  when: check_ec2_result['instances'][0] is not defined
- name: create tenant folder
  file:
    path: "{{inventory_repo_folder}}/group_vars/{{client_name}}_tenant"
    state: directory
    mode: 0755
  when: check_ec2_result['instances'][0] is not defined
- name: create password file for tenant
  template:
    src: passwords.j2
    dest: "{{inventory_repo_folder}}/group_vars/{{client_name}}_tenant/passwords.yml"
    mode: 0644
  when: check_ec2_result['instances'][0] is not defined
- name: encrypt password file
  shell: "ansible-vault encrypt --vault-password-file /opt/password.txt {{inventory_repo_folder}}/group_vars/{{client_name}}_tenant/passwords.yml"
  when: check_ec2_result['instances'][0] is not defined
- name: create variable file for tenant
  template:
    src: tenant_vars.j2
    dest: "{{inventory_repo_folder}}/group_vars/{{client_name}}_tenant/vars.yml"
    mode: 0644
  when: check_ec2_result['instances'][0] is not defined
- name: git push code
  shell: "git add .; git commit -m 'add {{client_name}} tenant instance at {{region}}'; git push"
  args:
    chdir: "{{inventory_repo_folder}}"
  when: check_ec2_result['instances'][0] is not defined
- name: remove theme role from tenant instance step1
  lineinfile:
    path: "./lt_edxapp_with_worker.yml"
    state: absent
    regexp: lt_themes
- name: remove theme role from tenant instance step2
  lineinfile:
    path: "./lt_edxapp_with_worker.yml"
    state: absent
    regexp: assets